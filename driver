import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import javax.swing.JTextField;


import javax.swing.Timer;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * The driver class runs everything
 * 
 * @author Ben, Ryan, Zach
 *
 */
public class driver extends JPanel implements ActionListener, MouseListener, KeyListener {
	
	/**
	 * Game timer 
	 */
    Timer timer;
    
    /**
     * Starting x velocity
     */
    int x_vel = 10;
    
    /**
     * Starting y velocity
     */
    int y_vel = 10;
    
    /**
     * An array list that holds the asteroids
     */
    ArrayList<asteroid> asteroids = new ArrayList<asteroid>();
    
    /**
     * An array list that holds the bullets
     */
    ArrayList<Bullet> bullets = new ArrayList<Bullet>();
    
    static int counter;
    asteroid a;
    Ship ship;
    driver d;
    
    /**
     * Main method of the driver runs the game.
     * 
     * @param args
     */
	public static void main(String[] args) {
		
		/**
		 * Instantiating a start screen
		 */
		StartScreen s = new StartScreen(640,480);
		s.showscreen();
		while(s.getcounter()<=0){
			System.out.println(s.getcounter());
			//do nothing
		}
		driver d = new driver();
		d.setup();
	}
	
	/**
	 * Displays the game over screen when the game ends
	 */
	public static void gameover(){
		End_Game endgame = new End_Game(640,480); 
		endgame.showscreen();
	}

	/**
	 * Test if the ship collides with an asteroid
	 * 
	 * @param r1 Object 1
	 * @param r2 Object 2
	 * @return returns true if nothing happens
	 */
	public boolean overlaps(Rectangle r1, Rectangle r2){
		if(r1.getX() + r1.getWidth()  < r2.getX() + 25) return false;
		if(r1.getX() -18 > r2.getX() + r2.getWidth()) return false;
		if(r1.getY() + r1.getHeight() < r2.getY() -20) return false;
		if(r1.getY() +12 > r2.getHeight() + r2.getY()) return false;
		return true;
	}
	
	/**
	 * Sets up the start of the game
	 */
    public void  setup() {
    	//use a list and for loop to make as many asteroids with random x and y as needed
    	for(int i =0; i<1 ; i++){
    	asteroids.add(a = new asteroid());
    	asteroids.get(i).setx((int)(Math.random()*640));
    	asteroids.get(i).sety((int)(Math .random()*480));
    	asteroids.get(i).setxvel((int)(Math.random()*4)-2);
    	asteroids.get(i).setyvel((int)(Math.random()*4)-2);
    		while(asteroids.get(i).getxvel()==0||asteroids.get(i).getyvel()==0){
    			asteroids.get(i).setxvel((int)(Math.random()*4)-2);
            	asteroids.get(i).setyvel((int)(Math.random()*4)-2);
    		}
    	}
    	ship = new Ship();
		timer = new Timer(17, this);
        JFrame frame = new JFrame("asteroid");
        frame.setBackground(Color.black);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.add(this);
        frame.setSize(640,480);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        KeyListener listener = new MyKeyListener();
        frame.addKeyListener(listener);
        timer.start();
    }	

	@Override
	/**
	 * Checks when something happens and controls the game screen to manipulate the ship, asteroids, and bullets
	 */
	public void actionPerformed(ActionEvent e) {
		repaint();
		int numnewas = 0;
		for(int i = 0; i<asteroids.size();i++){
			if(overlaps(asteroids.get(i).getBounds(), ship.getBounds())) ship.setdead();
			if(!ship.getalive()){
				driver.gameover();
				ship.setlocx(-10);
				ship.setlocy(-10);
				ship.setalive();
			}
			for(int q = 0; q < bullets.size(); q++){
				if(overlaps(asteroids.get(i).getBounds(), bullets.get(q).getBounds())){
					asteroids.remove(i); 
					bullets.remove(q);
					numnewas= numnewas+2;
				}
			}
		}
		for(int i = 0; i<numnewas; i++){
	    	a.setx((int)(Math.random()*640));
	    	a.sety((int)(Math .random()*480));
	    	a.setxvel((int)(Math.random()*4)-2);
	    	a.setyvel((int)(Math.random()*4)-2);
	    		while(a.getxvel()==0||a.getyvel()==0){
	    			a.setxvel((int)(Math.random()*4)-2);
	            	a.setyvel((int)(Math.random()*4)-2);
	    		}
	    		asteroids.add(a = new asteroid());
	    		if(overlaps(asteroids.get(i).getBounds(), ship.getBounds())){
	    			asteroids.remove(i);
	    			i--;
	    		}
		}
		for(int i = 0; i<asteroids.size();i++){
			asteroids.get(i).setx(asteroids.get(i).getx()+asteroids.get(i).getxvel());
			asteroids.get(i).sety(asteroids.get(i).gety()+asteroids.get(i).getyvel());
			if(asteroids.get(i).getx()>=640-asteroids.get(i).getradius()){
				asteroids.get(i).setx(0);
			}
			if(asteroids.get(i).getx()< 0){
				asteroids.get(i).setx(640-asteroids.get(i).getradius());
			}	
			if(asteroids.get(i).gety() >= 480-asteroids.get(i).getradius()){
				asteroids.get(i).sety(0);
			}
			if(asteroids.get(i).gety()<0){
				asteroids.get(i).sety(479-asteroids.get(i).getradius());
			}
		}
		int[] thistempx = new int[3];
		int[] thistempy = new int[3];
		thistempx = ship.getshipx();
		thistempy = ship.getshipy();
			if(thistempx[2]>640){
				thistempx[0]=1;
				thistempx[1]=15;
				thistempx[2]=30;
				ship.setShipX(thistempx);
				ship.setlocx(1);
			}
			if(thistempx[0]<=0){
				thistempx[0]=610;
				thistempx[1]=625;
				thistempx[2]=640;
				ship.setShipX(thistempx);
				ship.setlocx(610);
			}
			if(thistempy[1]<0){
				thistempy[0]=480;
				thistempy[1]=440;
				thistempy[2]=480;
				ship.setShipY(thistempy);
				ship.setLocY(480);
			}
			if(thistempy[0]>480){
				thistempy[0]=40;
				thistempy[1]=0;
				thistempy[2]=40;
				ship.setShipY(thistempy);
				ship.setlocy(40);
			}
		ship.setLocX(ship.getLocX()+ship.getVelX());
		ship.setLocY(ship.getLocY()+ship.getVelY());
		int[] tempx = new int[3];
		int[] tempy = new int[3];
		for(int i = 0; i < ship.getshipx().length; i ++){
			tempx[i] = ship.getshipx()[i]+ ship.getVelX();
		}
		for(int i = 0; i < ship.getshipx().length; i ++){
			tempy[i] = ship.getshipy()[i]+ ship.getVelY();
		}
		Ship.shipx = tempx;
		Ship.shipy = tempy;
		for(int i = 0; i < bullets.size(); i++){
			bullets.get(i).setLocX(bullets.get(i).getlocx() + bullets.get(i).getvelx());
			bullets.get(i).setLocY(bullets.get(i).getlocy() + bullets.get(i).getvely());
			if(bullets.get(i).getlocy()==0){
				bullets.remove(i);
			}
		}
	}
	
	/**
	 * Paints an object
	 */
	public void paint(Graphics g) {
	        super.paintComponent(g);
	        Graphics2D g2 = (Graphics2D) g;
	        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
	        g2.setColor(Color.green);
	        g2.fillPolygon(ship.getshipx(), ship.getshipy(), 3);
	        g2.setColor(Color.black);
	        for(int i = 0; i<asteroids.size();i++){
	        	 Ellipse2D.Double shape = new Ellipse2D.Double(asteroids.get(i).getx(), asteroids.get(i).gety(), asteroids.get(i).getradius(), asteroids.get(i).getradius());
	        	    g2.fill(shape);
	        }
	        g2.setColor(Color.magenta);
	        g2.fillPolygon(ship.getshipx(), ship.getshipy(), 3);
	        for(int i= 0; i < bullets.size(); i++){
	        	g2.setColor(bullets.get(i).getColor());
	        	Shape temp = bullets.get(i).getshape();
	        	bullets.get(i).setlocy(bullets.get(i).getlocy() + -7);
	        	g2.fill(new Rectangle(bullets.get(i).getlocx(), bullets.get(i).getlocy(), bullets.get(i).getwidth(), bullets.get(i).getheight()));
	        }
	        g2.setColor(Color.red);
	        g2.drawString("#Asteroids: " + asteroids.size(), 20, 20); 
	 }

	/**
	 * Key listener checks when a button is pressed and causes something to happen
	 * 
	 * @author Ben, Ryan, Zach
	 *
	 */
	public class MyKeyListener extends Ship implements KeyListener {
		boolean shot = false;
		@Override
		public void keyTyped(KeyEvent e) {}
		@Override
		/**
		 * Tracks if the arrow keys or space bar is pressed and moves the ship and fires the bullet.
		 */
		public void keyPressed(KeyEvent e) {
			System.out.println("keyPressed="+KeyEvent.getKeyText(e.getKeyCode()));
			int key = e.getKeyCode();
			if(key==37) ship.setVelX(-3); 
			if(key==38) ship.setVelY(-3); 
			if(key==39) ship.setVelX(3); 
			if(key==40) ship.setVelY(3); 
			if(key  == 32){
				if(!shot) bullets.add(new Bullet());
				shot = true;
			}
		}

		@Override
		/**
		 * Stops the ship from moving when the keys are released
		 */
		public void keyReleased(KeyEvent e) {
			System.out.println("keyReleased="+KeyEvent.getKeyText(e.getKeyCode()));
			int key = e.getKeyCode();
			if(key==37) ship.setVelX(0);
			if(key==38) ship.setVelY(0);
			if(key==39) ship.setVelX(0);
			if(key==40) ship.setVelY(0);
			if(key==32) shot = false;
		}
	}
	@Override
	public void mouseClicked(MouseEvent e) {}
	@Override
	public void mousePressed(MouseEvent e) {}
	@Override
	public void mouseReleased(MouseEvent e) {}
	@Override
	public void mouseEntered(MouseEvent e) {}
	@Override
	public void mouseExited(MouseEvent e) {}
	@Override
	public void keyPressed(KeyEvent arg0) {}
	@Override
	public void keyReleased(KeyEvent arg0) {}
	@Override
	public void keyTyped(KeyEvent arg0) {}
}
