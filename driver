import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import javax.swing.JTextField;


import javax.swing.Timer;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class driver extends JPanel implements ActionListener, MouseListener, KeyListener {
    Timer timer;
    int x = 0;
    int x_vel = 10;
    int y_vel = 10;
    //create a list of asteroids that will hold a and b respectivly
    ArrayList<asteroid> asteroids = new ArrayList<asteroid>();
    ArrayList<Bullet> bullets = new ArrayList<Bullet>();
    asteroid a;
    Ship ship;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		StartScreen s = new StartScreen(640,480);
		s.showscreen();
		while(s.getcounter()<=0){
			//do nothing
		}
		driver d = new driver();
		d.setup();
		
		
	}

    public void  setup() {
    	//use a list and for loop to make as many asteroids with random x and y as needed
    	for(int i =0; i<10; i++){
    	asteroids.add(a = new asteroid());
    	asteroids.get(i).setx((int)(Math.random()*640));
    	asteroids.get(i).sety((int)(Math.random()*480));
    	asteroids.get(i).setxvel((int)(Math.random()*4)-2);
    	asteroids.get(i).setyvel((int)(Math.random()*4)-2);
    	
    		while(asteroids.get(i).getxvel()==0||asteroids.get(i).getyvel()==0){
    			asteroids.get(i).setxvel((int)(Math.random()*4)-2);
            	asteroids.get(i).setyvel((int)(Math.random()*4)-2);
    		}
    	}
    	
    	ship = new Ship();
  

    		
		timer = new Timer(17, this);
        JFrame frame = new JFrame("asteroid");
        frame.setBackground(Color.black);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.add(this);
        frame.setSize(640,480);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        KeyListener listener = new MyKeyListener();
        frame.addKeyListener(listener);
        timer.start();
    }	
	
	
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		repaint();
		for(int i = 0; i<asteroids.size();i++){
			asteroids.get(i).setx(asteroids.get(i).getx()+asteroids.get(i).getxvel());
			asteroids.get(i).sety(asteroids.get(i).gety()+asteroids.get(i).getyvel());
			
			if(asteroids.get(i).getx()>=640-asteroids.get(i).getradius()){
				asteroids.get(i).setx(1+asteroids.get(i).getradius());
				//b.setxvel(b.getxvel()*(-1));//flop it
			}
			
			if(asteroids.get(i).getx()<= 0+asteroids.get(i).getradius()){
				asteroids.get(i).setx(640-asteroids.get(i).getradius());//flop it
			}	
			
			if(asteroids.get(i).gety() >= 480-asteroids.get(i).getradius()){
				asteroids.get(i).sety(1+asteroids.get(i).getradius());
				//b.setyvel(b.getyvel()*(-1));
			}
			if(asteroids.get(i).gety()<=0+asteroids.get(i).getradius()){
				asteroids.get(i).sety(479-asteroids.get(i).getradius());
			}
		}
		int[] thistempx = new int[3];
		int[] thistempy = new int[3];
		thistempx = ship.getshipx();
		thistempy = ship.getshipy();
	
			if(thistempx[2]>640){
				thistempx[0]=1;
				thistempx[1]=15;
				thistempx[2]=30;
				ship.setShipX(thistempx);
			}
			if(thistempx[0]<0){
				thistempx[0]=610;
				thistempx[1]=625;
				thistempx[2]=640;
				ship.setShipX(thistempx);
			}
			if(thistempy[1]<0){
				thistempy[0]=640;
				thistempy[1]=600;
				thistempy[2]=640;
				ship.setShipX(thistempy);
			}
			if(thistempy[0]>640){
				thistempy[0]=40;
				thistempy[1]=0;
				thistempy[2]=40;
				ship.setShipY(thistempy);
			}
		
		
		
		ship.setLocX(ship.getLocX()+ship.getVelX());
		ship.setLocY(ship.getLocY()+ship.getVelY());
		int[] tempx = new int[3];
		int[] tempy = new int[3];
		for(int i = 0; i < ship.getshipx().length; i ++){
			tempx[i] = ship.getshipx()[i]+ ship.getVelX();
			
			//ship.getshipx()[i] += ship.getVelX();
		}
		for(int i = 0; i < ship.getshipx().length; i ++){
			tempy[i] = ship.getshipy()[i]+ ship.getVelY();
			
			//ship.getshipy()[i] += ship.getVelY();
		}
		Ship.shipx = tempx;
		Ship.shipy = tempy;
		
		for(int i = 0; i < bullets.size(); i++){
			bullets.get(i).setLocX(bullets.get(i).getlocx() + bullets.get(i).getvelx());
			bullets.get(i).setLocY(bullets.get(i).getlocy() + bullets.get(i).getvely());
		}
		
		
		
		
		// JTextField textField = new JTextField();
		   //textField.addKeyListener();

	}
	
	 public void paint(Graphics g) {
	       
		 	//create a for loop to make a bundle of circles
	        super.paintComponent(g);
	        Graphics2D g2 = (Graphics2D) g;
	        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
	        
	        g2.setColor(Color.green);
	        g2.fillPolygon(ship.getshipx(), ship.getshipy(), 3);
	        
	        g2.setColor(Color.black);
	        for(int i = 0; i<asteroids.size();i++){
             
	        	 Ellipse2D.Double shape = new Ellipse2D.Double(asteroids.get(i).getx(), asteroids.get(i).gety(), asteroids.get(i).getradius(), asteroids.get(i).getradius());
	        	    g2.fill(shape); 
	        	
	        }
	        g2.setColor(Color.magenta);
	        g2.fillPolygon(ship.getshipx(), ship.getshipy(), 3);
	        
	        for(int i= 0; i < bullets.size(); i++){
	        	
	        	g2.setColor(bullets.get(i).getColor());
	        	Shape temp = bullets.get(i).getshape();
	        	
	        	bullets.get(i).setlocy(bullets.get(i).getlocy() + -7);
	        	
	        	g2.fill(new Rectangle(bullets.get(i).getlocx(), bullets.get(i).getlocy(), bullets.get(i).getwidth(), bullets.get(i).getheight()));
	        }   
	        
	 
	 }
	 
//ryans code
	public class MyKeyListener extends Ship implements KeyListener {
		boolean shot = false;
		@Override
		public void keyTyped(KeyEvent e) {
			
		}

		@Override
		public void keyPressed(KeyEvent e) {
			System.out.println("keyPressed="+KeyEvent.getKeyText(e.getKeyCode()));
			int key = e.getKeyCode();
			if(key==37) ship.setVelX(-5); 
			if(key==38) ship.setVelY(-5); 
			if(key==39) ship.setVelX(5); 
			if(key==40) ship.setVelY(5); 
			if(key  == 32){
				if(!shot) bullets.add(new Bullet());
				shot = true;
			}
			
		}

		@Override
		public void keyReleased(KeyEvent e) {
			System.out.println("keyReleased="+KeyEvent.getKeyText(e.getKeyCode()));
			int key = e.getKeyCode();
			if(key==37) ship.setVelX(0);
			if(key==38) ship.setVelY(0);
			if(key==39) ship.setVelX(0);
			if(key==40) ship.setVelY(0);
			if(key==32) shot = false;
			
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		
		// TODO Auto-generated method stub
		/*
		System.out.println("keyPressed="+KeyEvent.getKeyText(arg0.getKeyCode()));
		int key = arg0.getKeyCode();
		if(key==37) ship.setVelX(-5); ship.setVelY(0);
		if(key==38) ship.setVelY(5); ship.setVelX(0);
		if(key==39) ship.setVelX(5); ship.setVelY(0);
		if(key==40) ship.setVelY(-5); ship.setVelX(0);
		*/
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
		/*System.out.println("keyReleased="+KeyEvent.getKeyText(arg0.getKeyCode()));
		int key = arg0.getKeyCode();
		if(key==37) ship.setVelX(-1);
		if(key==38) ship.setVelY(1);
		if(key==39) ship.setVelX(1);
		if(key==40) ship.setVelY(-1);
		*/
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
